package main

import (
	"bytes"
	"flag"
	"fmt"
	"github.com/BurntSushi/toml"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"
)

func init() {
	rand.Seed(time.Now().UnixNano())
}

func main() {
	var err error
	var configPath = flag.String("config", "config.toml", "config file")
	var outputPath = flag.String("output", "-", "output file")
	flag.Parse()

	var outputFile = os.Stdout
	if *outputPath != "-" {
		outputFile, err = os.Create(*outputPath)
		check(err)
		defer outputFile.Close()
	}

	conf := &config{}
	_, err = toml.DecodeFile(*configPath, conf)
	check(err)

	// normalize config and insert default value
	if len(conf.Listen) == 0 {
		conf.Listen = []string{"127.0.0.1:53", "[::1]:53"}
	}
	if conf.DefaultEcsPrefixV4 == 0 {
		conf.DefaultEcsPrefixV4 = 24
	}
	if conf.DefaultEcsPrefixV6 == 0 {
		conf.DefaultEcsPrefixV6 = 48
	}

	// generate global config
	// program identity
	_, err = fmt.Fprintf(outputFile, "%s Auto generated by %s %s\n", OutputCommentPrefix, appName, appVersion)
	check(err)
	_, err = fmt.Fprintf(outputFile, "%s %s\n", OutputCommentPrefix, appUrl)
	check(err)

	// time
	_, err = fmt.Fprintf(outputFile, "%s generated at %s\n", OutputCommentPrefix, time.Now().Format("2006-01-02 15:04:05"))
	check(err)

	_, err = fmt.Fprint(outputFile, globalConfigPrependString)
	check(err)

	// control socket
	if len(conf.ControlSocketListen) > 0 {
		_, err = fmt.Fprintf(outputFile, `
-- control socket
controlSocket("%s")
setKey("%s")
`, conf.ControlSocketListen, conf.ControlSocketKey)
		check(err)
	}

	// web server
	if len(conf.WebServerListen) > 0 {
		_, err = fmt.Fprintf(outputFile, `
-- web server
webserver("%s", "%s")
`, conf.WebServerListen, conf.WebServerPassword)
		check(err)
	}

	// listen
	for _, addr := range conf.Listen {
		_, err = fmt.Fprintf(outputFile, "addLocal(\"%s\")\n", addr)
		check(err)
	}

	// ECS https://dnsdist.org/advanced/ecs.html
	if conf.ECS {
		_, err = fmt.Fprintf(outputFile, `
%s EDNS0 Client Subnet
setECSSourcePrefixV4(%d)
setECSSourcePrefixV6(%d)
`,
			OutputCommentPrefix,
			conf.DefaultEcsPrefixV4,
			conf.DefaultEcsPrefixV6,
		)
		check(err)
	}

	// default DNS servers
	_, err = fmt.Fprintf(outputFile, "%s default upstream\n", OutputCommentPrefix)
	check(err)
	for _, addr := range conf.Upstreams {
		_, err = fmt.Fprintf(outputFile, "newServer(\"%s\")\n", addr)
		check(err)
	}

	// disable RFC2136 DNS update
	if conf.AllowDDNSUpdates {
		_, err = fmt.Fprintf(outputFile, `
%s disallow RFC2136 DNS update
addAction(OpcodeRule(DNSOpcode.Update), RCodeAction(dnsdist.REFUSED))
`, OutputCommentPrefix)
		check(err)
	}

	log.Printf("Match list count: %d", len(conf.Matches))
	for index, m := range conf.Matches {
		// normalize options and process default options
		if m["provider"] == nil {
			m["provider"] = "DomainList"
		}
		if m["action"] == nil {
			m["action"] = "resolve"
		} else {
			m["action"] = strings.ToLower(m["action"].(string))
		}

		var o bytes.Buffer

		// find the appropriate provider
		providerName := strings.ToLower(m["provider"].(string))
		found := false
		for key, value := range providers {
			if strings.ToLower(key) == providerName {
				// got a match
				log.Printf("Processing match #%d, type %s, action %s\n", index+1, key, m["action"])
				found = true
				value(m, &o)
				_, err = fmt.Fprintf(outputFile, "\n%s match #%d [%s] -> %s\n", OutputCommentPrefix, index+1, m["provider"], m["action"])
				check(err)
				_, err = outputFile.WriteString(o.String())
				check(err)
				_, err = fmt.Fprintf(outputFile, "\n%s end match #%d\n\n", OutputCommentPrefix, index+1)
				check(err)
				break
			}
		}

		if !found {
			log.Fatalf("Unknown provider %s at match #%d\n", m["provider"], index+1)
		}

	}
}
