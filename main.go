package main

import (
	"bytes"
	"flag"
	"fmt"
	"github.com/BurntSushi/toml"
	"log"
	"os"
	"strings"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {
	var configPath = flag.String("config", "config.toml", "config file")
	var outputPath = flag.String("output", "-", "output file")
	flag.Parse()

	var outputFile = os.Stdout
	if *outputPath != "-" {
		outputFile, err := os.Create(*outputPath)
		check(err)
		defer outputFile.Close()
	}

	conf := &config{}
	_, err := toml.DecodeFile(*configPath, conf)
	check(err)

	// default
	if len(conf.Listen) == 0 {
		conf.Listen = []string{"127.0.0.1:53", "[::1]:53"}
	}

	_, err = fmt.Fprintf(outputFile, "%s Auto generated by dnsconf \n\n", OutputCommentPrefix)
	check(err)

	log.Printf("Match list count: %d", len(conf.Matches))
	for index, m := range conf.Matches {
		// default
		if m["provider"] == nil {
			m["provider"] = "DomainList"
		}

		var o bytes.Buffer

		// find the appropriate provider
		providerName := strings.ToLower(m["provider"].(string))
		found := false
		for key, value := range providers {
			if strings.ToLower(key) == providerName {
				// got a match
				log.Printf("Processing match #%d, type %s", index+1, key)
				found = true
				value(m, &o)
				_, err = fmt.Fprintf(outputFile, "%s match #%d [%s]\n", OutputCommentPrefix, index+1, m["provider"])
				check(err)
				_, err = outputFile.WriteString(o.String())
				check(err)
				_, err = fmt.Fprintf(outputFile, "\n%s end match #%d\n", OutputCommentPrefix, index+1)
				check(err)
				break
			}
		}

		if !found {
			log.Fatalf("Unknown provider %s at match #%d", m["provider"], index+1)
		}

	}
}
